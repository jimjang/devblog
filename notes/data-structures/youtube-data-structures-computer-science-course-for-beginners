Data Structures

YouTube
freeCodeCamp.org
Data Structures - Computer Science Course for Beginners(02:59:26)
https://www.youtube.com/watch?v=zg9ih6SVACc

Definition
> Data Structures: ways to manage data for easy access and modification
> BigO Notation: metrics to measure the speed and efficiency
    > Time Complexity Equations
        > Measure the size of the data and the number of operations returned
            * Time is not used because of the subjectivity of the hardware performance.
            * This is not the absolute value for deciding which data structure to use 
        > Always use the worst-case scenario
    > Metrics
        > Access
        > Search
        > Insert
        > Delete 
    > Examples(from best to worst)
        > O(1): completes the task in one step
        > O(log(n)): gets more efficient as the size of the data set increases
        > O(n): completes the task in n steps
        > O(n log n): gets less efficient as the size of the data set increases
        > O(n^2): increases exponentially
        > O(2^n): increases exponentially

Overview
> Arrays
> ArrayLists
> Stacks
> Queues
> LinkedLists
> Doubly-LinkedLists
> Dictionaries
> Hash-Tables
> Trees
> Tries
> Heaps
> Graphs

Arrays
> Summary
    > Key takeaways
        > Store values of the same type without a change in size
        > Uses a numeric index
        > Fast access
            * BigO Notation Access: 0(1)
    > Real-life examples
        > Spam, plagiarism, spelling error detection
        > Search engine
        > Online ticket booking(flight, train, theater, etc.)
            * seats [3][4]
        > Image processing(RGB)
        > Contacts 
        > Leaderboards
        > String and matrix
> Introduction
    > Can be used to store anything
    > Store values of the SAME type(integer, string, float, etc.)
    > The size is FIXED and CAN'T be changed
> 3 Attributes
    > Name
    > Type
    > Size
> Parallel Arrays
    > Contain the same number of elements
    > Have corresponding values in the same position
    > Useful for storing different types of data about the same entity
    > Examples
        > Names["John Smith", "Gary Vee", "David Lee", "Adam Knox"]
        > Salaries[10000, 12500, 8750, 15000]
> 2 Ways to create
    > Insert values right away(aware of values)
        > Java
            > int array[] = {1, 2, 3};
        > Python
            > array = [1, 2, 3]
        > C#
            > int[] array = {1, 2, 3};
    > Set the size and insert elements later(not aware of values)
        > Java
            > int array[] = new int[10];
        > Python: no need to set the size
        > C#
            > int[] array = new int[10];
> Access and replace
    > Use a numerical index
        > An index starts at 0.
    > Accessing example
        > Numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        > Numbers[5] = 6
        > Numbers[10] = array out of bounds error
    > Replacing example
        > Numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        > Numbers[9] = 11
        > Numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]
> 2-Dimensional Arrays(Matrix)
    > Access
        > Require two indexes: column and row
        > Example
            > ["Steven", "Adam", "Sean", "Peter"]
            > ["Alex", "Lucas", "Marcus", "Cam"]
            > ["Dave", "Quniten", "Carl", "Anthony"]
            > ["Jake", "John", "Jackson", "Ethan"]
            > matrix[2, 3] = "Anthony"
    > Life examples
        > Chess
        > Bingo
        > Image(RGB)
> BigO Notation
    > Access: O(1)
        > Know its final size and how much space is reserved
    > Search: O(n)
        > Work with unsorted arrays
        > Must use linear search
        > In the worst-case scenario, the value is the last element within the array.
    > Insert: O(n)
        > Must shift every element up one index to insert a new value
    > Delete: O(n)
        > Must shift every element down one index to delete a value
> Pros and Cons
    > Pros
        > Good for storing similar contiguous data
        > O(1) accessing power
        > Very basic. Easy to learn and master
    > Cons
        > Size of the array cannot be changed once initialized
        > Inserting and deleting are not efficient
        > Can be wasting storage space

ArrayLists
> Key takeaways
    > Arrays with a dynamic size
    > ArrayLists can only store objects, whereas Arrays can store all data types. 
    > ArrayLists store references on top of indexes. 
> Introduction
    > Growing Arrays
    > Backed by Arrays with similar functionality
    > The type of functionality varies among different languages.
> Create
    > The base size of an ArrayList is ten if you leave the parenthesis blank.
    > Autoboxing
        > ArrayLists hold objects, not primitive types(eg. 2)
        > However, the computer will convert an integer into an integer object. 
    > Formula
        > Java
            > ArrayList<Integer> arrayList = new ArrayList<Integer>();
        > C#
            > ArrayList arrayList = new ArrayList();        
        > Python
            * Arrays and ArrayLists are called lists with partially both functionalities.
> 5 differences between Arrays and ArrayLists
    > Arrays
        > Fixed Size
        > Can store all data types
        > Needs to create methods
        > Doesn't require much memory use or upkeep
        > Ideal for smaller tasks without much change
    > ArrayLists
        > Dynamic Size
        > Can only store objects
        > Comes with pre-built methods
        > Requires more memory use and upkeep
        > Ideal for more interactive programs
> 6 common methods
    > Add
        > Add(object): adds the element to the end of the ArrayList
            > ArrayList exampleAList = new ArrayList(4);
                > [ , , , ]
            > exampleAList.add(2);
                > [2, , , ]
            > exampleAList.add(5);
                > [2, 5, , ]
        > Add(object, index): adds the element at the index and shifts other elements to the right
            > exampleAList.add(1, 0);
                > [1, 2, 5, ]
            > exampleAList.add(3, 2);
                > [1, 2, 3, 5]
    > Remove
        > Remove(index): removes the object at the index
            > to remove '5' from [1, 2, 3, 5]
                > exampleAList.remove(3)
        > Remove(object): removes the first instance of the object
            > to remove '5' from [1, 2, 3, 5]
                > exampleAList.remove(new Integer(5));
    > Get
        > Get(index): returns the object
            > [1, 2, 3, 5]
            > exampleAList.get(0);
                > 1
            > exampleAList.get(2);
                > 3
    > Set
        > Set(index, object): replaces the object
            > [1, 2, 3, 5]
            > exampleAList.set(3, 4);
                > [1, 2, 3, 4]
    > Clear
        > clear(): deletes every element in the ArrayList
            > exampleAList.clear();
                > [ , , , , ]
    > toArray
        > toArray(): converts the ArrayList into an Array
            > Object convertedExample[] = exampleAList.toArray();
> BigO Notation: same as Arrays
    > Access: O(1)
        > ArrayLists store references on top of indexes. 
        > With a get method, you can instantly access data even though they are not stored contiguously.  
    > Search: O(n)
        > Work with unsorted arrays
        > Must use linear search
        > In the worst-case scenario, the value is the last element within the array.
    > Insert: O(n)
        > Must shift every element up one index to insert a new value
    > Delete: O(n)
        > Must shift every element down one index to delete a value

Stacks
> Summary
    > Key Takeaways
        > LIFO
        > Inserting and deleting data occur at a single point.
        > BigO Notation
            > Access/Search: O(n)
            > Insert/Delete: O(1)
    > Real-life Examples
        > Browser's previous and next buttons
        > Undo and redo functions
        > History of visited sites
        > Call and message logs
        > Recursion algorithm
> Introduction
    > Stacks are sequential access data structures, meaning no instant access.
        > Each element is dependent on the others with particular orders.
        > Arrays and ArrayLists are random access data structures that provide instant access.
    > Last In First Out(LIFO)
        > When you grab a book in a pile of books, you take out the top(last/latest) one first.
        > Easy to visualize vertically
> 4 Common Methods
    > Push
        > Push(object): pushes an element onto the top of the Stacks
            * exampleStack.push("this")
    > Pop
        > Pop(): removes an element from the top of the Stack
            * exampleStack.pop()
    > Peek
        > Peek(): returns the top value without removing it
            * exampleStack.peek()
    > Contains
        > Contains(object): searches through the Stack and returns a Boolean value
            > exampleStack.contains("this")
                > True
            > exampleStack.contains("hello")
                > False
> BigO Notation
    > Access: O(n)
        > To get to the bottom book in a pile, you must take the rest of the pile off.
    > Search: O(n)
        > To find the bottom book in a pile, you must go through the rest.
    > Insert: O(1)
        > Because data only flows from the top, you can insert it instantly.
    > Delete: O(1)
        > Because data only flows from the top, you can delete it instantly.

Queues
> Summary
    > Key Takeaways
        > FIFO
        > Inserting and deleting data occur at a single point.
        > BigO Notation
            > Access/Search: O(n)
            > Insert/Delete: O(1)
    > Real-life Examples
        > Waiting in line
        > Job scheduling
        > Sending an email
        > Uploading and downloading
        > Sorting algorithms
> Introduction
    > Stacks are also sequential access data structures, meaning no instant access.
        > Each element is dependent on the others with particular orders.
        > Arrays and ArrayLists are random access data structures that provide instant access.
    > First In First Out(FIFO)
        > First added element gets removed first. 
        > When you are standing in a line, the first person in the line will enter first.
        > Easy to visualize horizontally
        > You remove data from the front and add it to the back.
> 4 Common Methods
    > Enqueue
        > Enqueue(object): adds an element to the tail of the Queue
            * exampleQueue.enqueue("now")
    > Dequeue
        > Dequeue(): removes an element from the head of the Queue
            * exampleQueue.dequeue()
    > Peek
        > Peek(): returns the forefront object of the Queue without removing it
            * exampleQueue.peek()
    > Contains
        > Contains(object): searches through the Queue and returns a Boolean value
            > exampleQueue.contains("now")
                > True
            > exampleQueue.contains("hello")
                > False
> BigO Notation
    > Access: O(n)
        > To get to the last person(tail) in line, you must go through everyone in front.
    > Search: O(n)
        > To find the last person(tail) in line, you must check everyone in front.
    > Insert: O(1)
        > Because data comes in at the front, you can insert it instantly.
    > Delete: O(1)
        > Because data gets out at the back, you can delete it instantly.

LinkedLists
> Summary
    > Key Takeaways
        > A node contains two parts: data and reference(pointer).
        > You can use LinkedLists to make other data strucutures(Stacks, Queues, etc.).
        > You can add or remove data anywhere, unlike Stacks and Queues.
        > You can only go forward with pointers, not backward.
        > BigO Notation
            > Access/Search: O(n)
            > Insert/Delete: either O(n) or O(1)        
    > Real-life Examples
        > A queue on Spotify(one way)
        > Photo viewing software(one way)
> Introduction
    > LinkedLists are also sequential access linear data structures.
    > Each element is a separate object, a node with two parts.
        > Data
        > Reference(pointer): points to the next node
            * The last node(tail) points toward a null value.
    > You can add or remove data anywhere, unlike Stacks and Queues.
    > You can add multiple attributes or variables, unlike Arrays and ArrayLists.    
    > You can use LinkedLists to make other data structures(Stacks, Queues, etc.).
    > You can only go forward with pointers, not backward.
> Add
    > Add to the head
        > Make the new node point to the current head node
    > Add to the middle
        > Make the new node point to the next node
        > Make the previous node point to the new node
    > Add to the tail
        > Make the current tail node point toward the new node
> Remove
    > Remove from the head
        > Make the head node point to a null value
    > Remove from the middle
        > Make the previous node point toward the next node
    > Remove from the tail
        > Make the previous tail node point to a null value           
> BigO Notation
    > Access: O(n)
        > Sequential data structures: must go through all the data
    > Search: O(n)
        > Sequential data structures: must go through all the data
    > Insert: either O(n) or O(1)
        > Inserting in the middle: O(n)
        > Inserting either in the head or the tail: O(1)
    > Delete: either O(n) or O(1)
        > Deleting in the middle: O(n)
        > Deleting either in the head or the tail: O(1)

Doubly Linked Lists
> Summary
    > Key Takeaways
        > A node contains three parts.
            > Data
            > Previous pointer
            > Next pointer
        > You can use Doubly Linked Lists for Stack-like functionality.
        > You can go forward and backward with pointers, unlike Linked Lists.
        > BigO Notation
            > Access/Search: O(n)
            > Insert/Delete: either O(n) or O(1)        
    > Real-life Examples
        > Music playlist
        > Browser's back-and-forth function
        > Open recent function
        > 'Alt + tab'
> Introduction
    > Doubly Linked Lists are also sequential access linear data structures.
    > You can go forward and backward with pointers, unlike Linked Lists.
    > Each element is a separate object, a node with three parts.
        > Data
        > Previous pointer
        > Next pointer
> Components
    > Initial Node(head/tail)
        > Previous pointer: null
        > Next pointer: null
    > New Node
        > Head Node
            > Previous pointer: null
            > Next pointer: next node
        > Middle
            > Previous pointer: previous node
            > Next pointer: next node
        > Tail Node
            > Previous pointer: previous node
            > Next pointer: null
> Add
    > Add to the head
        > Set the next pointer of the new head node point toward the old head node
        > Set the previous pointer of the new head node point to null
        > Set the previous pointer of the old head node point toward the new head node
    > Add to the middle
        > Set the previous pointer of the new node point toward the previous node
        > Set the next pointer of the new node point toward the next node
        > Set the next pointer of the previous node point toward the new node
        > Set the previous pointer of the next node point toward the new node
    > Add to the tail
        > Set the next pointer of the old tail node point toward the new tail node
        > Set the previous pointer of the new tail node point toward the old tail node
        > Set the next pointer of the new tail node to null
> Remove
    > Remove from the head
        > Set the next pointer of the removed head node point to null
        > Set the previous pointer of the new head node point to null
    > Remove from the middle
        > Set the next pointer of the previous node point toward the next node
        > Set the previous pointer of the next node point toward the previous node
        > Set both pointers of the removed node to null
    > Remove from the tail
        > Set the previous pointer of the removed tail node point to null
        > Set the next pointer of the new tail node point to null
> BigO Notation
    > Access: O(n)
        > Sequential data structures: must go through all the data
    > Search: O(n)
        > Sequential data structures: must go through all the data
    > Insert: either O(n) or O(1)
        > Inserting in the middle: O(n)
        > Inserting either in the head or the tail: O(1)
    > Delete: either O(n) or O(1)
        > Deleting in the middle: O(n)
        > Deleting either in the head or the tail: O(1)

Dictionaries
> Summary
    > Key Takeaways
        > Reasons to use
            > Option for non-numerical indexes
            > Flexibility in making keys
            > BigO Notation(Average Time Complexity Equations): O(1)
        > Two restrictions
            > Every key can only appear once within the dictionary.
            > Each key can only have one value.    
    > Real-life Examples
        > Social security number
        > Social media feeds
        > Passwords
> Introduction
    > One of the most abstract data structures
    > Also called Maps or Associative Arrays
    > Store data with keys instead of a numerical index
        * Keys can be any primitive data type(string, boolean, dictionary, etc.).
    > Two restrictions
        > Every key can only appear once within the dictionary.
        > Each key can only have one value.
> Hash Table
    > Hash Function: takes all the keys and strategically maps them to certain index locations
        > Key       : [1, 10, 100, 1K, 10K, 100K, 1M, 10M, 100M, 1B]
        > Function  : Key / key * (number of digits - 1)
        > Index     : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    > Hash Collision: run two different keys into a hash function, resulting in one index location
        > Open Addressing: puts the key in some other index location like the next nil value
        > Closed Addressing
            > Uses Linked Lists to chain together keys with the same hash values
            > Drawback: must go through the Linked List to find the right value
> BigO Notation(Average Time Complexity Equations)
    > Access/Search/Insert/Delete: O(1)
> BigO Notation(Time Complexity Equations)
    > Access/Search/Insert/Delete: O(n)

Trees
> Summary
    > Key Takeaways
        > Hierarchical data structures as opposed to linear
        > Each node can point towards multiple nodes, unlike Linked Lists.
        > Advantages of Binary Search Trees
            > Can search in logarithmic time
            > Great for storing large quantities of data with easy accessibility and modification 
    > Real-life Examples
        > Family tree
        > File structure(folders and files)
        > Company structure
> Introduction
    > Trees are hierarchical data structures as opposed to linear.
    > Contain a series of multiple linked nodes
    > Each node can point towards multiple nodes.
        * A node of a Linked List can only point to a single node.
> Terminology
    > Property of a node
        > Vertice: a node in a Tree
        > Edge: a connection between nodes
        > Root node: the topmost node of a Tree
        > Child node: a connected node having one level above itself
        > Parent node: a node having one or more child nodes
        > Leaf node: a node without child nodes
        > Depth: the number of edges to get to the root node
    > Property of the Tree
        > Height: the greatest number of edges toward a leaf node
> Different types of Trees
    > Binary Search Tree
    > AVL Tree
    > Red-Black Tree
    > N-ary Tree
> Binary Search Tree
    > Advantages
        > Can search in logarithmic time
            > Go left if the value is less than the current node
            > Go right if the value is greater than the current node
        > Great for storing large quantities of data with easy accessibility and modification
    > Restrictions
        > A node can have two children at the most.
        > For any given parent node:
            > The left child's value is smaller.
            > The right child's value is bigger.
        > Two nodes cannot contain the same value. 

Tries
> Summary
    > Key Takeaways
        > Tree-like data structures, also called Digital Trees
        > Often underrated and only used in certain situations
        > Nodes store letters of an alphabet in the form of characters.
        > Quickly retrieve words in the form of strings by traversing down a path of the Trie 
    > Real-life Examples
        > Auto-complete
        > Spell check
> Terminology
    > Flagging: points toward a flag to mark the end of a word
> Example
    > D
        > A
            > D
                > .(Dad)
                > D
                    > Y
                        > .(Daddy)
        > E
            > N
                > .(Den)
                > V
                    > E
                        > R
                            > .(Denver)
            > W
                > .(Dew)
